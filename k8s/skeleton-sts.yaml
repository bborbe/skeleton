apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: skeleton
  namespace: '{{ "NAMESPACE" | env }}'
  annotations:
    keel.sh/policy: force
    keel.sh/trigger: poll
    keel.sh/match-tag: "true"
    keel.sh/pollSchedule: "@every 1m"
    random: '{{ "RANDOM" | env }}'
spec:
  replicas: 0
  selector:
    matchLabels:
      app: skeleton
  serviceName: skeleton
  template:
    metadata:
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9090"
        prometheus.io/scheme: http
        prometheus.io/scrape: "true"
        random: '{{ "RANDOM" | env }}'
      labels:
        app: skeleton
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: node_type
                    operator: In
                    values:
                      - '{{ "NAMESPACE" | env }}'
      containers:
        - name: service
          args:
            - -v={{"LOGLEVEL" | env}}
          env:
            - name: LISTEN
              value: ':9090'
            - name: SENTRY_DSN
              valueFrom:
                secretKeyRef:
                  key: sentry-dsn
                  name: skeleton
            - name: SENTRY_PROXY
              value: '{{"SENTRY_PROXY_URL" | env}}'
            - name: DATADIR
              value: '/data'
            - name: KAFKA_BROKERS
              value: '{{ "KAFKA_BROKERS" | env }}'
          image: '{{"DOCKER_REGISTRY" | env}}/skeleton:{{"BRANCH" | env}}'
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - containerPort: 9090
              name: http
          readinessProbe:
            httpGet:
              path: /readiness
              port: 9090
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 500m
              memory: 50Mi
            requests:
              cpu: 20m
              memory: 20Mi
          volumeMounts:
            - mountPath: /data
              name: datadir
      imagePullSecrets:
        - name: docker-quant
  updateStrategy:
    type: RollingUpdate
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        storageClassName: local-path
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
